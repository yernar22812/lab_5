from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.exceptions import InvalidSignature
import base64
import os

#–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –¥–≤–∞ –∫–ª—é—á–∞ –ø—É–±–ª–∏—á–Ω—ã–π(–¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è) –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π(–¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏)
def generate_keys():
    try:
        private_key = rsa.generate_private_key(
            public_exponent=65537, # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            key_size=2048 # —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        )
        public_key = private_key.public_key() # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–∂–µ

        # Save private key
        with open("private_key.pem", "wb") as f:
            f.write(private_key.private_bytes( # —Å–æ—Ö–æ—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–π—Ç —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–æ—Ä–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
                encoding=serialization.Encoding.PEM, # –≤ pem —Ñ–∞–π–ª–µ —Å–æ—Ö–Ω—Ä–∞–∏—Ç—å—Å—è –æ–±—á–Ω–æ –∫–ª—é—á–∏ –∏–º–µ–Ω–Ω–æ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ö—Ä–∞–Ω—è—Ç—Å—è
                format=serialization.PrivateFormat.TraditionalOpenSSL, # –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –µ—Å—Ç—å –Ω–æ–≤–µ–µ –Ω–æ –Ω–µ –≤–µ–∑–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ                encryption_algorithm=serialization.NoEncryption()
            ))

        # Save public key
        with open("public_key.pem", "wb") as f:
            f.write(public_key.public_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PublicFormat.SubjectPublicKeyInfo #—Ç–æ–∂–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
            ))

        print("‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã .pem")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {e}")

#–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —à–∏—Ñ—Ä—É–µ—Ç –≤–≤–µ–¥–µ–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤—ã–≤–æ–¥–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª–µ
def encrypt_message(message):
    try:
        with open("public_key.pem", "rb") as f: # –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç pem —Ñ–∞–π–ª
            public_key = serialization.load_pem_public_key(f.read())

        encrypted = public_key.encrypt(
            message.encode(),
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()), # –ø–∞–¥–¥–∏–Ω–≥ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å  MGF1 –¥–µ–ª–∞–µ—Ç –º–∞—Å–∫—É –¥–ª—è –±–æ–ª—å—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                algorithm=hashes.SHA256(), # —Ö—ç—à–∏—Ä—É–µ—Ç –¥–ª—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–ª—è –∑–∞—â–∏—Ç—ã
                label=None
            )
        )

        encoded = base64.b64encode(encrypted).decode() # —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —É–∂–µ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        print("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n" + encoded)

        with open("encrypted_message.txt", "w") as f: # –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ WWWW –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –æ–Ω —Å–æ–∑–¥–∞—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –±–ª–æ–∫ with –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∑–∞–∫—Ä—ã–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            f.write(encoded)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏:", e)

#–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç –≤ —Å–µ–±—è —Å—Ç—Ä–æ–∫—É base 64 –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –µ—ë –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–æ–º–æ—â–∏ —É–∂–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def decrypt_message(encoded):
    try:
        with open("private_key.pem", "rb") as f:
            private_key = serialization.load_pem_private_key(f.read(), password=None)

        encrypted = base64.b64decode(encoded.encode())

        decrypted = private_key.decrypt(
            encrypted,
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )

        print("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n" + decrypted.decode())

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ:", e)

#–ü–æ–¥–ø–∏—Å—å
def sign_message(message):
    try:
        with open("private_key.pem", "rb") as f:
            private_key = serialization.load_pem_private_key(f.read(), password=None)

        signature = private_key.sign(
            message.encode(),
            padding.PSS(
                mgf=padding.MGF1(hashes.SHA256()),
                salt_length=padding.PSS.MAX_LENGTH
            ),
            hashes.SHA256()
        )

        encoded_sig = base64.b64encode(signature).decode()
        print("‚úçÔ∏è –¶–∏—Ñ—Ä–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å:\n" + encoded_sig)

        with open("signature.txt", "w") as f:
            f.write(encoded_sig)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏:", e)

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
def verify_signature(message, encoded_signature):
    try:
        with open("public_key.pem", "rb") as f:
            public_key = serialization.load_pem_public_key(f.read())

        signature = base64.b64decode(encoded_signature.encode())

        public_key.verify(
            signature,
            message.encode(),
            padding.PSS(
                mgf=padding.MGF1(hashes.SHA256()),
                salt_length=padding.PSS.MAX_LENGTH
            ),
            hashes.SHA256()
        )

        print("‚úÖ –ü–æ–¥–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ª–∏–Ω–Ω–æ–µ).")

    except InvalidSignature:
        print("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ–ª–∞–Ω–æ).")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∏:", e)

# –ø—Ä–æ—Å—Ç–∞—è –º–µ–Ω—é—à–∫–∞
def main():
    while True:
        print("\nüì¨ RSA Secure Message App - –ú–µ–Ω—é:")
        print("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏")
        print("2. –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print("3. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print("4. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞")
        print("5. –ü–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print("6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å")
        print("7. –í—ã—Ö–æ–¥")
        choice = input("> ")

        if choice == "1":
            generate_keys()
        elif choice == "2":
            message = input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ")
            encrypt_message(message)
        elif choice == "3":
            encoded = input("–í—Å—Ç–∞–≤—å—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (base64): ")
            decrypt_message(encoded)
        elif choice == "4":
            if os.path.exists("encrypted_message.txt"):
                with open("encrypted_message.txt", "r") as f:
                    encoded = f.read()
                    decrypt_message(encoded)
            else:
                print("–§–∞–π–ª encrypted_message.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif choice == "5":
            msg = input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: ")
            sign_message(msg)
        elif choice == "6":
            msg = input("–í–≤–µ–¥–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ")
            sig = input("–í—Å—Ç–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å (base64): ")
            verify_signature(msg, sig)
        elif choice == "7":
            break
        else:
            print("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main()
